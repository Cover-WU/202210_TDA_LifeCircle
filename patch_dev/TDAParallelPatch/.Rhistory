?quantile()
library(data.table)
X11()
datasets::mtcars
?gl
gl(2, 8, labels = c("Control", "Treat"))
library(TDA)
?bootstrapDiagram()
duplicated()
?duplicated()
library(TDA)
library(MASS)
library(tidyverse)
getwd()
boxVolumn <- function(x, y, z) return(x*y*z)
optim(c(3,4,5), function(x, y, z, lambda){boxVolumn(x,y,z) - lambda * (x*y + y*z + x*z - 60)})
optim(c(3,4,5,1), function(x, y, z, lambda){boxVolumn(x,y,z) - lambda * (x*y + y*z + x*z - 60)})
?boxVolumn
?optim
boxVolumn <- function(x, y, z) return(x*y*z)
optim(c(3,4,5,1), function(v){boxVolumn(v[1],v[2],v[3]) - v[4] * (v[1]*v[2] + v[1]*v[3] + v[2]*v[3] - 60)})
nlm(c(3,4,5,1), function(v){boxVolumn(v[1],v[2],v[3]) - v[4] * (v[1]*v[2] + v[1]*v[3] + v[2]*v[3] - 60)})
nlm(function(v){boxVolumn(v[1],v[2],v[3]) - v[4] * (v[1]*v[2] + v[1]*v[3] + v[2]*v[3] - 60)}, c(3,4,5,1))
energePerMcub <- 12 * 4
energePerMcub <- 12
energePerGram <- 12
energePerGram <- 1.2e3
efficiency <- 0.4
3.6e6 / efficiency / energePerGram / 4
boxVolumn <- function(x, y, z) return(x*y*z)
optim(c(3,4,5,1), function(v){boxVolumn(v[1],v[2],v[3]) - v[4] * (v[1]*v[2] + v[1]*v[3] + v[2]*v[3] - 100^2 / 2)})
install.packages("Rsolnp")
library(Rsolnp)
boxSurface <- function(x) return(x[1]*x[2] + x[1]*x[3] + x[2]*x[3])
boxVolumn <- function(x) prod(x)
constraint <- 100^2 / 2
boxVolumn <- function(x) prod(x)
boxSurface <- function(x) return(x[1]*x[2] + x[1]*x[3] + x[2]*x[3])
constraint <- 100^2 / 2
x0 <- c(3,4,5)
sol1 <- solnp(x0, fun=boxVolumn, eqfun=boxSurface, eqB = constraint)
constraint <- c(100^2 / 2)
x0 <- c(3,4,5)
sol1 <- solnp(x0, fun=boxVolumn, eqfun=boxSurface, eqB = constraint)
constraint <- c(100)
x0 <- c(3,4,5)
sol1 <- solnp(x0, fun=boxVolumn, eqfun=boxSurface, eqB = constraint)
boxVolumn <- function(x) -prod(x)
sol1 <- solnp(x0, fun=boxVolumn, eqfun=boxSurface, eqB = constraint)
View(boxVolumn)
optim(c(3,4,5,1), function(v){boxVolumn(v[1],v[2],v[3]) - v[4] * (v[1]*v[2] + v[1]*v[3] + v[2]*v[3] - 100^2 / 2)})
boxVolumn <- function(x, y, z) -x*y*z
optim(c(3,4,5,1), function(v){boxVolumn(v[1],v[2],v[3]) - v[4] * (v[1]*v[2] + v[1]*v[3] + v[2]*v[3] - 100^2 / 2)})
boxVolumn <- function(x, y, z) -x*y*z
optim(c(3,4,5,1), function(v){boxVolumn(v[1],v[2],v[3]) - v[4] * (v[1]*v[2] + v[1]*v[3] + v[2]*v[3] - 100^2 / 2)})
43.5+46.5+115+125.5+108.5+14.5+42.5+103.5+15.5+49.5
108+273.5+105+97+109.5+14.5+132.5+10+141.5
43.5+46.5+115+125.5+108.5+14.5+42.5+103.5+15.5+49.5+
108+273.5+105+97+109.5+14.5+132.5+10+141.5
50+144.5+161.5+24+104.5+32+52.5+52.5+115+24.5
66.5+128.5+53+105+97.5+32+18.5+52+138+97
142+95
50+144.5+161.5+24+104.5+32+52.5+52.5+115+24.5+
66.5+128.5+53+105+97.5+32+18.5+52+138+97+
142+95
6.5672*367.16
72.28+38.69+84.82
14.5+66.5+12+33.5
72.28+38.69+84.82+
14.5+66.5+12+33.5
72.28+38.69
18.48+98.93+12.05+15.03+29.07+43.73+16.43+77.65+35.23+42.7+69.65+16.19+20.83+
496.99
18+19+15+15.5+32.5+33+15+11.5
59.5+90+48+94+31.5+81.5+61.5+89.5
18+19+15+15.5+32.5+33+15+11.5+
59.5+90+48+94+31.5+81.5+61.5+89.5
79.7+100.4+258.77+46.4+160.1+167
433+301.1+85.5
18.48+98.93+12.05+15.03+29.07+43.73+16.43+77.65+35.23+42.7+69.65+16.19+20.83+
496.99 + 24.18
pckg.field <- 'C:\\Users\\Cover\\Desktop\\TDAParallelPatch\\R'
library(TDA)
library(MASS)
library(parallel)
library(oce)
library(rgdal)
library(raster)
library(tmap)
library(rgeos)
library(tmaptools)
library(tidyverse)
library(Rsolnp)
library(spdep)
# open the computation cluster
detectCores()
nNodes <- 9 # or 5
# input data
n <- 400
X <- circleUnif(n)
noise <- replicate(2, runif(100, -2,2))
X <- rbind(X, noise)
plot(X, cex=0.5, pch=16, asp=1)
setwd(pckg.field)
devtools::document()
devtools::load_all()
Xlim <- c(-2, 2)
Ylim <- c(-2, 2)
lim <- cbind(Xlim, Ylim)
by <- 0.1
# coords rulers
x_seq <- seq(Xlim[1], Xlim[2], by)
y_seq <- seq(Ylim[1], Ylim[2], by)
grid <- expand.grid(x_seq, y_seq)
# bootstrap setting
B <- 100       ## the number of bootstrap iterations should be higher!
## this is just an example
alpha <- 0.05
# tune the best m0 params with parallel computation
tuneParamM0 <- function(X, lim, by, grid, n.split, B, alpha, FUN=dtm, minimum=0.001, maximum=0.8, epslimit=0.1){
# initialization
precision <- Inf
start <- 0; end <- maximum
persisLen <- 0
while (precision > epslimit * persisLen) {
# initialize the params list
m0.v <- seq(start, end, length.out=n.split)
# print the logs
cat("Tuning the parameters below: \n", m0.v, '\n')
# # start the computation cluster
# clstrCPU <- makeCluster(n.split)
# tuning the parameter
maxPers <- maxPersistencePara(FUN=FUN, ifelse(m0.v == 0, minimum, m0.v), X, lim, by, Grid = grid, bandFUN = "bootstrapDiagram", B=B, alpha = alpha, distance = "bottleneck", dimension = c(0,1), printProgress = TRUE, corePermit=n.split)
# # close the cluster
# stopCluster(clstrCPU)
# select the optima
train.frame <- tibble(maxPers$parameters, maxPers$sigNumber, maxPers$sigPersistence) %>%
set_names(c("m0", "sigNumber", "sigPersistence"))
m.o <- train.frame %>% arrange(desc(sigNumber), desc(sigPersistence)) %>% slice(1) %>% .$m0
maxIdx <- which(ifelse(m0.v == 0, minimum, m0.v) == m.o)
persisLen <- maxPers$sigPersistence[maxIdx]
cutIdx <- c(ifelse(maxIdx - 1 > 0, maxIdx - 1, 1), ifelse(maxIdx + 1 > n.split, n.split, maxIdx + 1))
# cut the interval again for the next iteration
start <- m0.v[cutIdx[1]]; end <- m0.v[cutIdx[2]]
# verifying the current selection
precision <- abs(diff(maxPers$sigPersistence[cutIdx]))
}
result <- list(completeRes = maxPers, simpleRes = train.frame, optimal = m.o)
return(result)
}
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
View(FUN)
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
environment()
?environment()
devtools::document()
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
source("C:/Users/Cover/Desktop/TDAParallelPatch/R/maxPersistencePara.R", echo=TRUE)
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
pckg.field <- "C:\\Users\\Cover\\Desktop\\TDAParallelPatch"
setwd(pckg.field)
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
## Ranges and resolution of the grid
Xlim <- c(-2, 2)
Ylim <- c(-2, 2)
lim <- cbind(Xlim, Ylim)
by <- 0.1
# coords rulers
x_seq <- seq(Xlim[1], Xlim[2], by)
y_seq <- seq(Ylim[1], Ylim[2], by)
grid <- expand.grid(x_seq, y_seq)
# bootstrap setting
B <- 100       ## the number of bootstrap iterations should be higher!
## this is just an example
alpha <- 0.05
# tune the best m0 params with parallel computation
tuneParamM0 <- function(X, lim, by, grid, n.split, B, alpha, FUN=dtm, minimum=0.001, maximum=0.8, epslimit=0.1){
# initialization
precision <- Inf
start <- 0; end <- maximum
persisLen <- 0
while (precision > epslimit * persisLen) {
# initialize the params list
m0.v <- seq(start, end, length.out=n.split)
# print the logs
cat("Tuning the parameters below: \n", m0.v, '\n')
# # start the computation cluster
# clstrCPU <- makeCluster(n.split)
# tuning the parameter
maxPers <- maxPersistencePara(FUN=FUN, ifelse(m0.v == 0, minimum, m0.v), X, lim, by, Grid = grid, bandFUN = "bootstrapDiagram", B=B, alpha = alpha, distance = "bottleneck", dimension = c(0,1), printProgress = TRUE, corePermit=n.split)
# # close the cluster
# stopCluster(clstrCPU)
# select the optima
train.frame <- tibble(maxPers$parameters, maxPers$sigNumber, maxPers$sigPersistence) %>%
set_names(c("m0", "sigNumber", "sigPersistence"))
m.o <- train.frame %>% arrange(desc(sigNumber), desc(sigPersistence)) %>% slice(1) %>% .$m0
maxIdx <- which(ifelse(m0.v == 0, minimum, m0.v) == m.o)
persisLen <- maxPers$sigPersistence[maxIdx]
cutIdx <- c(ifelse(maxIdx - 1 > 0, maxIdx - 1, 1), ifelse(maxIdx + 1 > n.split, n.split, maxIdx + 1))
# cut the interval again for the next iteration
start <- m0.v[cutIdx[1]]; end <- m0.v[cutIdx[2]]
# verifying the current selection
precision <- abs(diff(maxPers$sigPersistence[cutIdx]))
}
result <- list(completeRes = maxPers, simpleRes = train.frame, optimal = m.o)
return(result)
}
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
devtools::document()
rm(list = c("maxPersistencePara"))
devtools::document()
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
n
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
devtools::document()
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
source("C:/Users/Cover/Desktop/TDAParallelPatch/R/maxPersistencePara.R", echo=TRUE)
rm(maxPersistence())
rm(list="maxPersistence"
)
rm(list="maxPersistencePara")
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
force(expr)
force(finally)
devtools::document()
devtools::document()
devtools::document()
debugSource("C:/Users/Cover/Desktop/TDAParallelPatch/debuggerFile.R", echo=TRUE)
force(expr)
ans <- tuneParamM0(X, lim, by, grid, n.split = nNodes, B = B, alpha = alpha)
devtools::document()
ans <- tuneParamM0(X, lim, by, grid, n.split = nNodes, B = B, alpha = alpha)
View(ans)
devtools::document()
# open the computation cluster
detectCores()
nNodes <- 9 # or 5
search
search()
detach('package:TDAParallelPatch')
search
search()
devtools::install("TDAParallelPatch")
devtools::install("TDAParallelPatch")
roxygen2::roxygenise(pckg.field)
devtools::check("TDAParallelPatch")
search()
detach( "package:TDAParallelPatch")
devtools::check("TDAParallelPatch")
devtools::check()
library(TDAParallelPatch)
## Ranges and resolution of the grid
Xlim <- c(-2, 2)
Ylim <- c(-2, 2)
lim <- cbind(Xlim, Ylim)
by <- 0.1
# coords rulers
x_seq <- seq(Xlim[1], Xlim[2], by)
y_seq <- seq(Ylim[1], Ylim[2], by)
grid <- expand.grid(x_seq, y_seq)
# bootstrap setting
B <- 100       ## the number of bootstrap iterations should be higher!
## this is just an example
alpha <- 0.05
# tune the best m0 params with parallel computation
tuneParamM0 <- function(X, lim, by, grid, n.split, B, alpha, FUN=dtm, minimum=0.001, maximum=0.8, epslimit=0.1){
# initialization
precision <- Inf
start <- 0; end <- maximum
persisLen <- 0
while (precision > epslimit * persisLen) {
# initialize the params list
m0.v <- seq(start, end, length.out=n.split)
# print the logs
cat("Tuning the parameters below: \n", m0.v, '\n')
# # start the computation cluster
# clstrCPU <- makeCluster(n.split)
# tuning the parameter
maxPers <- maxPersistencePara(FUN=FUN, ifelse(m0.v == 0, minimum, m0.v), X, lim, by, Grid = grid, bandFUN = "bootstrapDiagram", B=B, alpha = alpha, distance = "bottleneck", dimension = c(0,1), printProgress = TRUE, corePermit=n.split)
# # close the cluster
# stopCluster(clstrCPU)
# select the optima
train.frame <- tibble(maxPers$parameters, maxPers$sigNumber, maxPers$sigPersistence) %>%
set_names(c("m0", "sigNumber", "sigPersistence"))
m.o <- train.frame %>% arrange(desc(sigNumber), desc(sigPersistence)) %>% slice(1) %>% .$m0
maxIdx <- which(ifelse(m0.v == 0, minimum, m0.v) == m.o)
persisLen <- maxPers$sigPersistence[maxIdx]
cutIdx <- c(ifelse(maxIdx - 1 > 0, maxIdx - 1, 1), ifelse(maxIdx + 1 > n.split, n.split, maxIdx + 1))
# cut the interval again for the next iteration
start <- m0.v[cutIdx[1]]; end <- m0.v[cutIdx[2]]
# verifying the current selection
precision <- abs(diff(maxPers$sigPersistence[cutIdx]))
}
result <- list(completeRes = maxPers, simpleRes = train.frame, optimal = m.o)
return(result)
}
ans <- tuneParamM0(X, lim, by, grid, n.split = nNodes, B = B, alpha = alpha)
m.o <- ans$optimal
# distance to measure of the sub-level sets
Diag <- gridDiag(X, dtm, lim = lim, by = by, sublevel = TRUE, library = "Dionysus", location = TRUE,
printProgress = TRUE, m0=m.o)
# confidence set
# band computed from distance function
band <- bootstrapBand(X, dtm, grid, B, alpha, printProgress = TRUE, m0=m.o)
# band computed from persistent diagram
band0 <- bootstrapDiagram(X, dtm, lim, by, maxdimension = 1, B=B, alpha=alpha, dimension=0, printProgress = T, m0=m.o)
band1 <- bootstrapDiagram(X, dtm, lim, by, maxdimension = 1, B=B, alpha=alpha, dimension=1, printProgress = T, m0=m.o)
plot(Diag[["diagram"]], band = 2*band$width)
abline(2*band0, 1, col='black', lwd=2.5)
abline(2*band1, 1, col='red', lwd=2, lty=5)
library(parallel)
detectCores()
detectCores(logical = FALSE)
library(devtools)
check()
install.packages('roxygen2')
library(roxygen2)
check()
build()
devtools::load_all()
View(maxPersistencePara)
build()
View(maxPersistencePara)
View(maxPersistencePara)
View(maxPersistencePara)
devtools::build()
?parallel::makeCluster()
devtools::load_all()
View(maxPersistencePara)
devtools::document()
devtools::check()
?TDA::maxPersistence
devtools::check()
devtools::document()
usethis::use_mit_license()
devtools::check()
devtools::build()
?TDA::bootstrapDiagram()
sample(1:42, 3)
sample(1:42, 3)
sample(1:42, 3)
sample(1:42, 3)
sample(1:3, 3)
sample(1:3, 3)
sample(1:3, 3)
sample(1:2, 3)
rMultinom(size = 30, prob=3)
TDA::rMultiNom
ans <- 1:4
lapply(ans, function(x){sample(7, size = 3)})
?TDA::bootstrapDiagram()
rm(list = ls())
devtools::document()
devtools::check()
usethis::use_package(TDA, type='Imports')
usethis::use_package('TDA', type='Imports')
devtools::check()
devtools::load_all()
install.packages("benchmarkme")
install.packages("benchmarkme")
library(benchmarkme)
res = benchmark_std()
plot(res)
devtools::build()
devtools::document()
usethis::use_package("TDA", type = "Imports")
usethis::use_package("Parallel", type = "Imports")
usethis::use_package("parallel", type = "Imports")
devtools::check()
devtools::build()
library(TDA)
library(MASS) # core package
library(parallel) # core package
library(tidyverse)
# open the computation cluster
rm(list = ls())
detectCores()
nNodes <- 9 # or 5
# input data
n <- 400
X <- circleUnif(n)
noise <- replicate(2, runif(100, -2,2))
X <- rbind(X, noise)
plot(X, cex=0.5, pch=16, asp=1)
Xlim <- c(-2, 2)
Ylim <- c(-2, 2)
lim <- cbind(Xlim, Ylim)
by <- 0.1
# coords rulers
x_seq <- seq(Xlim[1], Xlim[2], by)
y_seq <- seq(Ylim[1], Ylim[2], by)
grid <- expand.grid(x_seq, y_seq)
# bootstrap setting
B <- 100       ## the number of bootstrap iterations should be higher!
## this is just an example
alpha <- 0.05
devtools::load_all()
tuneParamM0test <- function(X, lim, by, grid, n.split, B, alpha, FUN=dtm, minimum=NA, maximum=0.8,
fluctLimit=0.1, approx=FALSE, approxSize=1e3){
# initialization
fluct <- Inf; smplsz.diff <- Inf; eps <- 1e-6
start <- 0; end <- maximum; width <- end - start
persisLen <- 0
n <- nrow(X)
if(is.na(minimum)){
minimum <- 1 / n
}
while ((fluct >= fluctLimit * persisLen - eps || width >= 0.05 - eps) && smplsz.diff > 0) {
# initialize the params list
m0.v <- seq(start, end, length.out=n.split)
# print the logs
cat("Tuning the parameters below: \n", m0.v, '\n')
# tuning the parameter
if(n > approxSize && approx){
maxPers <- maxPersistenceParApprox(FUN=FUN, ifelse(m0.v < minimum, minimum, m0.v), X, lim, by, approxSize, bandFUN = "sampleDiagram", B=B, alpha = alpha, distance = "bottleneck", dimension = c(0,1), printProgress = TRUE, corePermit=n.split)
}
else {
maxPers <- maxPersistencePara(FUN=FUN, ifelse(m0.v < minimum, minimum, m0.v), X, lim, by, Grid = grid, bandFUN = "bootstrapDiagram", B=B, alpha = alpha, distance = "bottleneck", dimension = c(0,1), printProgress = TRUE, corePermit=n.split)
}
# the original function written in maxPersistence has a grammar mistake.
# suppressWarnings(maxPers <- maxPersistence(FUN=FUN, ifelse(m0.v == 0, minimum, m0.v), X, lim, by, bandFUN = "bootstrapDiagram", B=B, alpha = alpha, parallel = TRUE, distance = "bottleneck", dimension = c(0,1), printProgress = TRUE))
# select the optima
train.frame <- tibble(maxPers$parameters, maxPers$sigNumber, maxPers$sigPersistence) %>%
set_names(c("m0", "sigNumber", "sigPersistence"))
m.o <- train.frame %>% arrange(desc(sigNumber), desc(sigPersistence)) %>% slice(1) %>% .$m0
maxIdx <- which(ifelse(m0.v == 0, minimum, m0.v) == m.o)
# update the gauge
persisLen <- maxPers$sigPersistence[maxIdx]
cutIdx <- c(ifelse(maxIdx - 1 > 0, maxIdx - 1, 1), ifelse(maxIdx + 1 > n.split, n.split, maxIdx + 1))
# cut the interval again for the next iteration
start <- m0.v[cutIdx[1]]; end <- m0.v[cutIdx[2]]; width <- end - start
# verifying the current selection
fluct <- persisLen - mean(maxPers$sigPersistence[cutIdx])
# compute the difference of the sample size
start.adj <- ifelse(start == 0, minimum, start)
smplsz.diff <- ceiling(end * n) - ceiling(start.adj * n)
}
result <- list(completeRes = maxPers, simpleRes = train.frame, optimal = m.o)
return(result)
}
ans <- tuneParamM0test(X, lim, by, grid, n.split = nNodes, B = B, alpha = alpha, approx = T, approxSize = 1e2)
ans <- tuneParamM0test(X, lim, by, grid, n.split = nNodes, B = B, alpha = alpha, approx = T, approxSize = 1)
debugSource("E:/Programming/R/202204_project_community_tda/TDAParallelPatch/debuggerFile.R", echo=TRUE)
debugSource("E:/Programming/R/202204_project_community_tda/TDAParallelPatch/debuggerFile.R", echo=TRUE)
debugSource("E:/Programming/R/202204_project_community_tda/TDAParallelPatch/debuggerFile.R", echo=TRUE)
debugSource("E:/Programming/R/202204_project_community_tda/TDAParallelPatch/debuggerFile.R", echo=TRUE)
ans <- tuneParamM0test(X, lim, by, grid, n.split = nNodes, B = B, alpha = alpha, approx = T, approxSize = 1)
ans <- tuneParamM0test(X, lim, by, grid, n.split = nNodes, B = B, alpha = alpha, approx = T, approxSize = 1)
ans <- tuneParamM0test(X, lim, by, grid, n.split = nNodes, B = B, alpha = alpha, approx = T, approxSize = 1)
ans <- tuneParamM0test(X, lim, by, grid, n.split = nNodes, B = B, alpha = alpha, approx = T, approxSize = 1)
ans <- tuneParamM0test(X, lim, by, grid, n.split = nNodes, B = B, alpha = alpha, approx = T, approxSize = 1)
ans <- tuneParamM0test(X, lim, by, grid, n.split = nNodes, B = B, alpha = alpha, approx = T, approxSize = 1)
ans <- tuneParamM0test(X, lim, by, grid, n.split = nNodes, B = B, alpha = alpha, approx = T, approxSize = 1)
detach("package:TDAParallelPatch")
devtools::load_all()
ans <- tuneParamM0test(X, lim, by, grid, n.split = nNodes, B = B, alpha = alpha, approx = T, approxSize = 1)
ans <- tuneParamM0test(X, lim, by, grid, n.split = nNodes, B = B, alpha = alpha, approx = T, approxSize = 1)
stop?
stop()
?stop()
conditionMessage(stop('e!'))
conditionMessage("e")
?conditionMessage()
stop(conditionMessage(stop('e!')))
msg <- conditionMessage(stop('e!'))
paste(stop('e!')
)
paste(stop('e!'))
as.character(stop('e!'))
tryCatch(stop("e!"), error=function(e){print(e)})
tryCatch(stop("e!"), error=function(e){as.character(e)})
tryCatch(stop("e!"), error=function(e){message(e)})
message(et)
message("etqdefa")
tryCatch(stop("e!"), error=function(e){conditionMessage(e)})
tryCatch(stop("e!"), error=function(e){stop(conditionMessage(e))})
load_all()
devtools::load_all()
ans <- tuneParamM0test(X, lim, by, grid, n.split = nNodes, B = B, alpha = alpha, approx = T, approxSize = 1)
devtools::load_all()
ans <- tuneParamM0test(X, lim, by, grid, n.split = nNodes, B = B, alpha = alpha, approx = T, approxSize = 1)
View(ans)
ans <- tuneParamM0test(X, lim, by, grid, n.split = nNodes, B = B, alpha = alpha, approx = T, approxSize = 1e2)
View(ans)
devtools::document()
devtools::document()
devtools::check()
devtools::build()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
